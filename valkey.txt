Valkey
Valkey ‚Äì Introduction
What is Valkey?
Valkey is an open-source, high-performance, in-memory data store, forked from Redis under the Linux Foundation in 2024. It retains full compatibility with Redis commands and data structures while aiming for enhanced community governance and transparent development.
Valkey is designed for speed, scalability, and low latency operations, making it suitable for caching, real-time analytics, message brokering, and more.

üîç Key Use Cases of Valkey



üì¶ What Valkey Includes ‚Äì Features Table



‚ÑπÔ∏è Additional Information
Governance: Managed under the Valkey project in Linux Foundation, encouraging open development and diverse community contribution.
Compatibility: Fully compatible with Redis clients, commands, and modules. Migrating from Redis to Valkey is straightforward.
License: BSD-3-Clause, ensuring permissive open-source usage in enterprise and open projects.
Release cadence: Regular releases focused on stability, performance improvements, and community-requested features.
Support ecosystem: Growing contribution from cloud vendors, database companies, and open-source contributors to maintain and enhance features.
Official website: https://valkey.io
. Valkey Architecture Diagram
1.1. Standalone Architecture
diff
CopyEdit
+-----------+
|  Client   |
+-----------+
     |
     v
+-----------+
|  Valkey   |
| Standalone|
+-----------+
     |
     v
[ Persistence (AOF, RDB) ]
‚û°Ô∏è Description: Single Valkey instance serving read/write requests. Persistence can be enabled via AOF or RDB snapshots for data durability.

1.2. Master-Replica Architecture
pgsql
CopyEdit
       +-----------+
       |  Client   |
       +-----------+
            |
            v
       +-----------+
       | Master    |
       | Valkey    |
       +-----------+
            |
     +------+------+
     |             |
     v             v
+-----------+ +-----------+
| Replica 1 | | Replica 2 |
+-----------+ +-----------+
‚û°Ô∏è Description: Master handles writes, replicas replicate data for high availability and read scalability.

1.3. Sentinel-based High Availability
pgsql
CopyEdit
        +-----------+
        |  Client   |
        +-----------+
             |
             v
       +-----------+
       | Sentinel  |
       +-----------+
        /    |    \
       v     v     v
  +-----------+ +-----------+ +-----------+
  | Master    | | Replica 1 | | Replica 2 |
  | Valkey    | +-----------+ +-----------+
  +-----------+
‚û°Ô∏è Description: Sentinel monitors Valkey nodes for failover, reconfiguration, and service discovery.

1.4. Cluster Mode Architecture
pgsql
CopyEdit
      +-----------+
      |  Client   |
      +-----------+
            |
            v
    +-----------------+
    | Valkey Cluster  |
    +-----------------+
     /     |     \
    v      v      v
+-------+ +-------+ +-------+
| Node1 | | Node2 | | Node3 |
+-------+ +-------+ +-------+
‚û°Ô∏è Description: Sharding data across multiple nodes for horizontal scalability and fault tolerance.

‚öôÔ∏è 2. Deployment Guides
2.1. Standalone Deployment
Install from package manager
bash
CopyEdit
# For Debian/Ubuntu
sudo apt update
sudo apt install valkey-server

# Start service
sudo systemctl start valkey-server
sudo systemctl enable valkey-server

2.2. Docker Deployment
Using Docker Hub image
bash
CopyEdit
docker run -d --name valkey -p 6379:6379 valkey/valkey
‚û°Ô∏è Data persistence example:
bash
CopyEdit
docker run -d --name valkey \
  -p 6379:6379 \
  -v /mydata:/data \
  valkey/valkey valkey-server --save 60 1000 --appendonly yes

2.3. Cluster Deployment (manual basic)
Start multiple Valkey instances with cluster enabled:
bash
CopyEdit
valkey-server --port 7000 --cluster-enabled yes --cluster-config-file nodes-7000.conf --cluster-node-timeout 5000 --appendonly yes
Repeat for ports 7001, 7002, etc.
Create cluster:
bash
CopyEdit
valkey-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 \
  --cluster-replicas 1
‚û°Ô∏è For production use, deploy across multiple nodes with replicas for HA.

2.4. Kubernetes Deployment
Using Helm (recommended)
bash
CopyEdit
helm repo add valkey https://charts.bitnami.com/bitnami
helm repo update

helm install my-valkey valkey/valkey
‚û°Ô∏è Configure values.yaml for:
Persistence settings
Cluster mode
Password authentication
Alternatively, deploy via Kubernetes manifests defining StatefulSets for persistence.

üîç 3. Valkey vs Redis Comparison Table



‚ÑπÔ∏è Additional Notes
Why Valkey was created: Due to licensing and governance concerns, aiming to keep Redis technology fully open under a neutral foundation.
Migration: Compatible with existing Redis setups. Migration involves pointing clients to Valkey instances with minimal or no code change.
Customer Benefits and Results with Valkey
üéØ 1. Key Customer Benefits



üìà 2. Typical Customer Results
‚úîÔ∏è Performance Improvements
Achieve ~1 million requests per second per node with sub-millisecond latency, depending on infrastructure.
Reduce database read load by 60-90% when used as a caching layer.

‚úîÔ∏è Cost Reduction
Eliminates licensing costs associated with commercial caching or database acceleration solutions.
Reduces cloud database read IOPS costs when integrated as a cache fronting RDBMS.

‚úîÔ∏è Scalability Gains
Seamless horizontal scaling in cluster mode allows businesses to handle traffic spikes without redesigning applications.
Supports auto-sharding, distributing data across nodes efficiently.

‚úîÔ∏è Increased Reliability
Sentinel and cluster failover configurations reduce RTO (Recovery Time Objective) to seconds, ensuring high availability SLAs.

‚úîÔ∏è Developer Productivity
Native support for rich data structures simplifies development of:
Leaderboards (using sorted sets)
Real-time chat systems (using pub/sub or streams)
Rate limiting (using atomic operations)
Session management (using key expiry)
Developers can implement complex use cases without additional backend systems or libraries.

‚úîÔ∏è Future-proofed Open Source Strategy
Confidence in an open governance model avoiding abrupt license changes, ensuring product sustainability and compliance with open-source strategy policies.

üí° 3. Example Customer Scenarios



üîë Summary
‚úîÔ∏è Valkey delivers high performance, scalability, cost efficiency, and flexibility for customers needing real-time data processing, caching, and messaging systems with the confidence of an open, community-governed solution.
üí∞ Valkey Subscription Costs
1. Core Valkey Costs
‚úÖ Valkey is completely free and open source.
License: BSD-3-Clause
Cost: $0 for software usage
Included: All core features, clustering, replication, persistence, and compatibility with Redis commands.

2. Why No Subscription Costs?
Valkey is governed under the Linux Foundation as an open community project, ensuring:
No commercial licensing fees for software usage.
No feature lock behind subscriptions ‚Äì unlike proprietary forks.
Freedom to deploy on any infrastructure (on-premises, private cloud, public cloud) without vendor restrictions.

3. Potential Associated Costs
While Valkey itself has no direct subscription cost, customers should consider:



4. Comparison with Redis Subscription Costs



5. Optional Commercial Support Options for Valkey
Currently, Valkey does not have an official commercial support entity like Redis Inc. However:
Organizations may engage third-party database support companies for enterprise SLAs.
Some cloud vendors may offer Valkey-compatible managed services with monthly costs covering hosting and support.

üìù Summary
‚úîÔ∏è Valkey itself has no subscription cost, enabling organisations to deploy an enterprise-grade in-memory data store without licensing fees.‚Ä®‚úîÔ∏è Total cost of ownership (TCO) depends only on infrastructure, operational support, and any optional third-party services, making Valkey a highly cost-efficient alternative to commercial caching and data store solutions.
üìò Valkey User Guide
1. Introduction
Valkey is an open-source, in-memory key-value data store, forked from Redis under the Linux Foundation. It is used for:
Caching
Real-time analytics
Message brokering (Pub/Sub)
Queues and rate limiting

2. Installation
2.1. Installing on Linux (Debian/Ubuntu)
bash
CopyEdit
sudo apt update
sudo apt install valkey-server
2.2. Starting Valkey
bash
CopyEdit
sudo systemctl start valkey-server
sudo systemctl enable valkey-server
‚û°Ô∏è Confirm it is running:
bash
CopyEdit
valkey-cli ping
# Output: PONG

2.3. Docker Deployment
bash
CopyEdit
docker run -d --name valkey -p 6379:6379 valkey/valkey

2.4. Kubernetes Deployment via Helm
bash
CopyEdit
helm repo add valkey https://charts.bitnami.com/bitnami
helm repo update

helm install my-valkey valkey/valkey
‚û°Ô∏è Modify values.yaml for persistence, authentication, and cluster settings as needed.

3. Connecting to Valkey
Using CLI
bash
CopyEdit
valkey-cli -h <host> -p <port>
‚û°Ô∏è For password-protected instances:
bash
CopyEdit
valkey-cli -h <host> -p <port> -a <password>

Using Application Clients
Valkey is compatible with all Redis clients in multiple languages. Example with Python:
python
CopyEdit
import redis

r = redis.StrictRedis(host='localhost', port=6379, db=0)
r.set('key', 'value')
print(r.get('key'))

4. Basic Commands



5. Persistence
Valkey supports:
‚úÖ RDB snapshots ‚Äì saves data at intervals.‚Ä®‚úÖ AOF (Append Only File) ‚Äì logs every write for durability.
Enable AOF
In valkey.conf:
nginx
CopyEdit
appendonly yes
Reload config:
bash
CopyEdit
valkey-cli CONFIG REWRITE

6. High Availability
6.1. Replication (Master-Replica)
In replica server config:
php-template
CopyEdit
replicaof <master-ip> <master-port>
‚û°Ô∏è The replica will automatically sync data from the master.

6.2. Sentinel for Failover
Valkey Sentinel monitors master and replica instances for automatic failover.
Start Sentinel with:
bash
CopyEdit
valkey-sentinel /etc/valkey/sentinel.conf
Define monitored master in sentinel.conf:
php-template
CopyEdit
sentinel monitor mymaster <master-ip> <master-port> 2

7. Cluster Mode
Valkey supports clustering for sharding data across nodes.
7.1. Cluster Setup (Basic)
Start multiple nodes with cluster mode enabled:
bash
CopyEdit
valkey-server --port 7000 --cluster-enabled yes --cluster-config-file nodes-7000.conf --appendonly yes
Repeat for ports 7001, 7002, etc.
Create cluster:
bash
CopyEdit
valkey-cli --cluster create \
127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 \
--cluster-replicas 1
‚û°Ô∏è Production clusters should be spread across multiple servers with proper replication.

8. Security
‚úÖ Authentication ‚Äì set requirepass in valkey.conf‚Ä®‚úÖ ACL ‚Äì supports role-based access control‚Ä®‚úÖ TLS Encryption ‚Äì configure for secure data transmission

9. Backup and Restore
Backup
RDB snapshot: Copy the dump file (default: dump.rdb) to backup storage.
Restore
Place dump.rdb in the Valkey data directory and restart the server.

10. Monitoring
Use:
INFO command for stats
MONITOR for real-time command inspection
Integration with Prometheus exporters for detailed metrics.

11. Best Practices
‚úîÔ∏è Use AOF with fsync for durability-critical data.‚Ä®‚úîÔ∏è Set reasonable TTL for cache keys to avoid memory exhaustion.‚Ä®‚úîÔ∏è Monitor memory usage and set maxmemory with eviction policy.‚Ä®‚úîÔ∏è For production, always deploy with replication or Sentinel/Cluster for HA.‚Ä®‚úîÔ∏è Secure with authentication and TLS in all environments.

12. Additional Resources
Official Valkey Website
Valkey GitHub Repository
Redis Command Reference (compatible)
Linux Foundation Valkey Project

‚ú® Summary
Valkey offers a fast, scalable, and open-source in-memory data store, ideal for caching, real-time processing, and low-latency applications with no vendor lock-in.
üîí Valkey Security Policies
1. Overview
Valkey, as an in-memory data store, is highly performant but must be secured properly to:
‚úÖ Prevent unauthorized data access‚Ä®‚úÖ Protect sensitive cached or transient data‚Ä®‚úÖ Maintain availability against attacks or misconfigurations

2. Authentication Policy
2.1. Enable Password Authentication
Set a strong password in valkey.conf:
php-template
CopyEdit
requirepass <strong_password_here>
‚û°Ô∏è Recommended:
Use complex passwords (minimum 16 characters, with symbols and numbers).
Rotate passwords regularly as per organisational policy (e.g., every 90 days).
Store passwords securely in a secrets manager (Vault, AWS Secrets Manager, Azure Key Vault).

2.2. Use ACLs for Fine-grained Access
If multiple applications or users connect to Valkey:
Configure user roles with least privilege using ACLs.
Example ACL setup:
bash
CopyEdit
ACL SETUSER readonly on >password ~* +get
ACL SETUSER readwrite on >password ~* +get +set +del

3. Network Security Policy
3.1. Bind to Specific Interfaces
By default, Valkey binds to 127.0.0.1. For production:
Bind only to trusted interfaces:
nginx
CopyEdit
bind 10.0.0.1
Avoid bind 0.0.0.0 unless protected by strict network-level controls.

3.2. Firewall Rules
‚úÖ Only allow inbound traffic to Valkey ports (default 6379) from:
Application servers that require access
Monitoring systems (if necessary)
Management hosts (jump servers or bastions)

4. Encryption Policy
4.1. Enable TLS
Valkey supports TLS to encrypt data in transit.
Generate server certificates and keys.
Update valkey.conf:
swift
CopyEdit
tls-port 6379
port 0
tls-cert-file /etc/valkey/certs/server.crt
tls-key-file /etc/valkey/certs/server.key
tls-ca-cert-file /etc/valkey/certs/ca.crt
‚û°Ô∏è Force clients to connect via TLS for confidentiality and integrity.

5. Data Protection Policy
5.1. Persistence File Security
RDB and AOF files can contain sensitive data.
Ensure:
‚úÖ File system permissions restrict access only to Valkey process owner.‚Ä®‚úÖ Backup these files securely with encryption at rest (e.g., S3 bucket with SSE).‚Ä®‚úÖ For extremely sensitive environments, consider disabling persistence if data can be rehydrated externally.

6. Availability and DoS Protection
Valkey is vulnerable to misuse that exhausts memory.
6.1. Configure Max Memory and Policies
In valkey.conf:
php-template
CopyEdit
maxmemory <value>
maxmemory-policy allkeys-lru
‚û°Ô∏è Prevents OOM errors that crash the instance.

6.2. Monitor Connections
Use maxclients setting to limit simultaneous connections:
nginx
CopyEdit
maxclients 10000
Helps mitigate connection flooding attacks.

7. Logging and Monitoring Policy
‚úÖ Enable logging of access and errors.‚Ä®‚úÖ Integrate logs with SIEM for security monitoring.‚Ä®‚úÖ Monitor:
Unexpected command patterns
High connection rates
Frequent authentication failures

8. Backup Security Policy
‚úîÔ∏è Store backups in encrypted storage.‚Ä®‚úîÔ∏è Implement access control on backup locations.‚Ä®‚úîÔ∏è Test restore procedures periodically to ensure data recoverability.

9. Update and Patch Policy
‚úîÔ∏è Regularly check for Valkey updates and security advisories.‚Ä®‚úîÔ∏è Apply patches in non-production first, then schedule production upgrades.‚Ä®‚úîÔ∏è Subscribe to Valkey GitHub and community channels for CVE alerts.

10. Compliance Policy
Ensure Valkey configurations and operations comply with organisational standards and applicable frameworks such as:
ISO 27001
SOC 2
PCI-DSS (if caching cardholder data, validate compliance implications)
HIPAA (for PHI data, enforce encryption and strict access controls)

11. Incident Response Policy
In case of suspected breach or vulnerability:
Isolate affected Valkey instances from networks if needed.
Rotate passwords and revoke compromised credentials immediately.
Review logs for unauthorized access patterns.
Restore data from last known safe backups if integrity is compromised.
Patch vulnerabilities before bringing back to production.

üîë Summary


‚≠ê Golden Rules ‚Äì Definition and Application
1. What are Golden Rules?
‚úîÔ∏è Golden rules are fundamental, non-negotiable principles that guide behaviours, decisions, and processes to ensure consistency, quality, and alignment with organisational or technical standards.
They are:
Simple to understand
Widely applicable
Critical for success, safety, or compliance

2. Why are Golden Rules Important?
‚úÖ Ensure standardisation and reliability‚Ä®‚úÖ Reduce risk and human error‚Ä®‚úÖ Enable quick decision-making under pressure‚Ä®‚úÖ Build a culture of accountability and excellence

3. Types of Golden Rules
Here are examples across different contexts:



4. Golden Rules for Technical Excellence (Examples)
Here is a set of golden rules you can adapt for your platform and DevOps teams:
Keep it Simple.‚Ä®Complexity is the enemy of reliability.
Fail Fast and Loud.‚Ä®Detect failures early to avoid cascading issues.
Automate Everything Possible.‚Ä®Reduce manual errors and increase efficiency.
Version Control All Artifacts.‚Ä®Infrastructure as code, configurations, scripts, and documents.
Test Before You Trust.‚Ä®Always validate in staging or sandbox environments.
Secure by Default.‚Ä®Security is not optional or an afterthought.
Design for Scale and Failure.‚Ä®Assume growth and unexpected outages in your architecture.
Document as You Build.‚Ä®If it‚Äôs not documented, it does not exist for the team.
Review, Learn, Improve.‚Ä®Blameless post-mortems to enhance systems and processes.
Communicate Clearly.‚Ä®Over-communicate rather than under-communicate during incidents or changes.

5. The Ultimate Golden Rule
‚ÄúTreat others as you want to be treated.‚Äù
This applies in all contexts ‚Äì technical or personal ‚Äì to build trust, respect, and high-performing teams.

üí° Summary
‚úîÔ∏è Golden rules are your non-negotiable guiding principles.‚Ä®‚úîÔ∏è They simplify decisions, reduce risks, and strengthen culture.‚Ä®‚úîÔ∏è Define them clearly within your team or organisation, communicate them regularly, and embed them into onboarding, reviews, and day-to-day operations.


