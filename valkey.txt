Valkey: High-Performance In-Memory Key-Value Store for Kubernetes

Valkey is a powerful, in-memory key-value data store designed for high throughput and low-latency workloads. Originating as a fork of Redis, Valkey is community-driven and governed under the Linux Foundation. It is ideal for caching, session storage, real-time analytics, and message queues. This article focuses on using Valkey within a Kubernetes cluster managed by Rancher and running on the containerd runtime.

Table of Contents

Architecture

Installation on Kubernetes

Authentication and Security

Basic Usage

Advanced Features

Use Cases

Community and Governance

Architecture

Valkey emphasizes speed and extensibility, making it well-suited for modern, cloud-native environments:

Event-Driven Core: Single-threaded model with efficient I/O using epoll/kqueue.

Persistence Options:

RDB (Redis Database Backups): Snapshot-based persistence for backups.

AOF (Append Only File): Logs every write operation for durability.

Replication: Master-replica model supporting high availability.

Clustering: Horizontal scalability using native sharding and distributed keys.

Modular Design: Extend functionality through dynamic modules.

Security Layers: Includes ACLs, password auth, and TLS.

Installation on Kubernetes

Deploying Valkey in a Rancher-Managed Cluster with containerd

Valkey is best deployed using a StatefulSet when persistence and high availability are required. Below is a simplified Deployment for non-production use.

Step 1: Create Deployment and Service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: valkey
spec:
  replicas: 1
  selector:
    matchLabels:
      app: valkey
  template:
    metadata:
      labels:
        app: valkey
    spec:
      containers:
      - name: valkey
        image: valkey/valkey:latest
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: valkey-data
          mountPath: /data
      volumes:
      - name: valkey-data
        persistentVolumeClaim:
          claimName: valkey-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: valkey
spec:
  selector:
    app: valkey
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
  type: ClusterIP

Step 2: Create a PersistentVolumeClaim (PVC)
Use a StorageClass to dynamically provision storage:

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: valkey-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 1Gi

Replace standard with your Rancher-provisioned StorageClass if needed.

Authentication and Security

Password Authentication

Enable password protection in valkey.conf or via environment variables:

requirepass yourStrongPassword

Use in the client:

AUTH yourStrongPassword

TLS Encryption

Valkey supports secure communication using TLS:

tls-port 6379
tls-cert-file /etc/valkey/certs/valkey.crt
tls-key-file /etc/valkey/certs/valkey.key
tls-ca-cert-file /etc/valkey/certs/ca.crt

These certificates should be stored in Kubernetes Secrets and mounted via volume mounts.

Access Control Lists (ACL)

Define fine-grained user permissions:

user alice on >password ~* +@all

Basic Usage

Connecting to Valkey

Use valkey-cli from within the cluster:

kubectl exec -it <valkey-pod-name> -- valkey-cli

Common Commands

SET mykey "value"
GET mykey
DEL mykey

Data Types Supported

Strings

Hashes

Lists

Sets

Sorted Sets

Bitmaps

HyperLogLogs

Streams

Advanced Features

Pub/Sub Messaging:

PUBLISH channel "message"
SUBSCRIBE channel

Lua Scripting:

EVAL "return redis.call('GET', KEYS[1])" 1 mykey

Streams for complex data pipelines.

Eviction Policies for cache management.

Snapshot and AOF Persistence for durability and backup.

Use Cases

Web and API Caching

Session Storage for Web Applications

Real-Time Analytics

Job Queues and Task Scheduling

Rate Limiting and Counters

Community and Governance

Valkey is governed by the Linux Foundation and developed openly by the community.

Website: https://valkey.io

Source Code: https://github.com/valkey-io/valkey

Discussion: GitHub Discussions, Discord

Conclusion

Valkey offers a high-performance, reliable alternative to Redis with a modern, open governance model. Seamlessly integrated with Kubernetes and Rancher using containerd and dynamic storage provisioning via StorageClasses, itâ€™s an excellent choice for cloud-native applications requiring in-memory data processing.

