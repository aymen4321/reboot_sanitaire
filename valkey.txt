📘 Redis Valkey Documentation
Enterprise Open-Source In-Memory Data Platform

Last updated: July 2025

🔹 General Introduction
Valkey is an open-source, high-performance, in-memory data store forked from Redis 7.2+, maintained under the Linux Foundation. It supports key-value operations, persistence, pub/sub, streams, geospatial data, and Lua scripting. Valkey is designed for high throughput and low-latency workloads and can be deployed in standalone or clustered mode across on-premises, hybrid, or Kubernetes environments.

It is fully compatible with most Redis clients and protocols and serves use cases such as:

Caching

Session stores

Pub/Sub messaging

Real-time analytics

Fraud detection and scoring

Feature stores in ML pipelines

🧭 User Guide – Getting Started
1. Prerequisites
Linux (Debian/Ubuntu, RHEL/CentOS) or Kubernetes

Docker / Podman (for containerized deployments)

System requirements:

RAM: Minimum 4GB (recommended 16GB+ for production)

CPU: 2+ cores

Disk: SSD recommended for persistence

2. Installation Options
Option A: Local (Debian/Ubuntu)
bash
Copy
Edit
sudo apt update
sudo apt install valkey-server valkey-tools
Option B: Docker
bash
Copy
Edit
docker run -d --name valkey -p 6379:6379 valkey/valkey
Option C: Kubernetes (Helm)
bash
Copy
Edit
helm repo add valkey https://charts.valkey.io
helm install my-valkey valkey/valkey
3. Configuration
Configuration file: /etc/valkey/valkey.conf

Common settings:

requirepass for authentication

appendonly yes for AOF persistence

save 900 1 for RDB snapshots

4. Starting the Server
bash
Copy
Edit
valkey-server /etc/valkey/valkey.conf
5. Connecting
bash
Copy
Edit
valkey-cli -h localhost -p 6379
🎓 Tutorials
💡 Basic Commands
bash
Copy
Edit
SET user:123 "Alice"
GET user:123
DEL user:123
🧵 Publish/Subscribe
bash
Copy
Edit
SUBSCRIBE fraud-alerts
PUBLISH fraud-alerts "Transaction Blocked"
🧩 Using Lists for Queues
bash
Copy
Edit
LPUSH transaction_queue "txn:0001"
RPOP transaction_queue
🧠 Lua Scripting
bash
Copy
Edit
EVAL "return redis.call('GET', KEYS[1])" 1 user:123
🔁 Cluster Setup (Advanced)
Use valkey-trib or Kubernetes Operator for multi-node setup

Shard data across multiple masters for horizontal scaling

📚 Additional Resources
Resource	Description
Valkey GitHub	Source code and issue tracker
Valkey Docs	Official documentation
Redis commands compatibility	https://redis.io/commands
Community Slack	Join the Valkey community
Recommended Clients	Python (redis-py), Java (lettuce, jedis), Node.js (ioredis)

🔐 Security Policies
Authentication: Use requirepass or Redis ACLs for user-based access.

TLS Encryption: Enable TLS in configuration for secure data-in-transit.

Firewall rules: Restrict access to trusted internal subnets only.

Role-Based Access (K8s): Use namespaces, RBAC, and Secrets for credentials.

Secrets Management: Store credentials using Vault/Kubernetes Secrets.

Configuration sample:

conf
Copy
Edit
tls-port 6379
tls-cert-file /etc/ssl/certs/valkey.crt
tls-key-file /etc/ssl/private/valkey.key
requirepass SuperSecurePass
🟡 Golden Rules
Never expose Valkey directly to the internet. Always use internal-only endpoints or reverse proxies.

Enable AOF or RDB snapshots depending on recovery SLA.

Use strong authentication (requirepass or ACLs).

Monitor memory usage: Use INFO MEMORY and set maxmemory policies (volatile-lru, allkeys-lru).

Avoid KEYS in production: Use SCAN for iterating large sets.

Isolate workloads: Separate cache from persistent data if possible.

Back up regularly: Automate dumps or use AOF + replication.

Log slow commands: Use slowlog and alert if execution > threshold.

Test persistence recovery periodically in non-prod.

Stay updated with the latest Valkey version and patches.
